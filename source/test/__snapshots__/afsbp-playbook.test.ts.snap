// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test App AFSBP Orchestrator Construct 1`] = `
Object {
  "Conditions": Object {
    "OrchestratorisGovCloudDE3D4910": Object {
      "Fn::Not": Array [
        Object {
          "Condition": "OrchestratorisNotGovCloud793D69A3",
        },
      ],
    },
    "OrchestratorisNotGovCloud793D69A3": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AWS::Partition",
            },
            "aws-us-gov",
          ],
        },
      ],
    },
  },
  "Resources": Object {
    "OrchestratorRole9CF251DB": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W11",
              "reason": "CloudWatch Logs permissions require resource * except for DescribeLogGroups, except for GovCloud, which only works with resource *",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "states.",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:",
                          Object {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          Object {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:undefined",
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:",
                          Object {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          Object {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:undefined",
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:",
                          Object {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          Object {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:undefined",
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:",
                          Object {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          Object {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:undefined",
                        ],
                      ],
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:GenerateDataKey",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":kms:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":alias/SO0111-SHARR-Key",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "BasePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestratorSO0111SHARROrchestratorAFSBP18511A69": Object {
      "Condition": "OrchestratorisGovCloudDE3D4910",
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "KmsKeyId is not supported in GovCloud.",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": "SO0111-SHARR-Orchestrator-AFSBP",
        "RetentionInDays": 365,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestratorSO0111SHARROrchestratorAFSBPEncrypted7E46D101": Object {
      "Condition": "OrchestratorisNotGovCloud793D69A3",
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "KmsKeyId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":kms:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":alias/SO0111-SHARR-Key",
            ],
          ],
        },
        "LogGroupName": "SO0111-SHARR-Orchestrator-AFSBP",
        "RetentionInDays": 365,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestratorStateMachine1E795392": Object {
      "DependsOn": Array [
        "OrchestratorRole9CF251DB",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"Get Finding Data from Input\\",\\"States\\":{\\"Get Finding Data from Input\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Extract top-level data needed for remediation\\",\\"Parameters\\":{\\"EventType.$\\":\\"$.detail-type\\",\\"Findings.$\\":\\"$.detail.findings\\",\\"Metrics\\":{\\"sendAnonymousMetrics.$\\":\\"States.Format('{{resolve:ssm:/Solutions/SO0111/sendAnonymousMetrics:1}}')\\"}},\\"Next\\":\\"Process Findings\\"},\\"Process Findings\\":{\\"Type\\":\\"Map\\",\\"Comment\\":\\"Process all findings in CloudWatch Event\\",\\"Next\\":\\"EOJ\\",\\"Parameters\\":{\\"Metrics.$\\":\\"$.Metrics\\",\\"Finding.$\\":\\"$$.Map.Item.Value\\",\\"EventType.$\\":\\"$.EventType\\"},\\"Iterator\\":{\\"StartAt\\":\\"Finding Workflow State NEW?\\",\\"States\\":{\\"Finding Workflow State NEW?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Or\\":[{\\"Variable\\":\\"$.EventType\\",\\"StringEquals\\":\\"Security Hub Findings - Custom Action\\"},{\\"And\\":[{\\"Variable\\":\\"$.Finding.Workflow.Status\\",\\"StringEquals\\":\\"NEW\\"},{\\"Variable\\":\\"$.EventType\\",\\"StringEquals\\":\\"Security Hub Findings - Imported\\"}]}],\\"Next\\":\\"Correct Security Standard?\\"}],\\"Default\\":\\"Finding Workflow State is not NEW\\"},\\"Finding Workflow State is not NEW\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Finding Workflow State is not NEW ({}).', $.Finding.Workflow.Status)\\",\\"State.$\\":\\"States.Format('NOTNEW')\\"},\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\"},\\"Next\\":\\"notify\\"},\\"notify\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Send notifications\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"aaa\\",\\"Payload.$\\":\\"$\\"}},\\"Wrong Security Standard\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Finding Security Standard is not AFSBP ({}). Verify that the correct remediation was selected.', $.Finding.GeneratorId)\\",\\"State.$\\":\\"States.Format('WRONGSTANDARD')\\"},\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\"},\\"Next\\":\\"notify\\"},\\"Automation Document is not Active\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Automation Document ({}) is not active ({}) in the member account({}).', $.AutomationDocId, $.AutomationDocument.DocState, $.Finding.AwsAccountId)\\",\\"State.$\\":\\"States.Format('REMEDIATIONNOTACTIVE')\\",\\"updateSecHub\\":\\"yes\\"},\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.RemediationRole\\",\\"ControlId.$\\":\\"$.ControlId\\",\\"SecurityStandard.$\\":\\"$.SecurityStandard\\"},\\"Next\\":\\"notify\\"},\\"Orchestrator Failed\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Orchestrator failed: {}', $.Error)\\",\\"State.$\\":\\"States.Format('LAMBDAERROR')\\",\\"Details.$\\":\\"States.Format('Cause: {}', $.Cause)\\"},\\"SecurityStandard.$\\":\\"States.Format('AFSBP')\\",\\"Payload.$\\":\\"$\\"},\\"Next\\":\\"notify\\"},\\"Get Automation Document State\\":{\\"Next\\":\\"Automation Doc Active?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get the status of the remediation automation document in the target account\\",\\"TimeoutSeconds\\":60,\\"ResultPath\\":\\"$.AutomationDocument\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"xxx\\",\\"Payload.$\\":\\"$\\"},\\"ResultSelector\\":{\\"DocState.$\\":\\"$.Payload.status\\",\\"Message.$\\":\\"$.Payload.message\\"}},\\"extractParameters\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Extract parameters needed for remediation\\",\\"Parameters\\":{\\"SecurityStandard.$\\":\\"States.Format('AFSBP')\\",\\"ControlId.$\\":\\"$.Finding.ProductFields.ControlId\\",\\"AccountId.$\\":\\"$.Finding.AwsAccountId\\",\\"Finding.$\\":\\"$.Finding\\",\\"RemediationRole.$\\":\\"States.Format('SO0111-SHARR-Remediation-AFSBP-{}', $.Finding.ProductFields.ControlId)\\",\\"AutomationDocId.$\\":\\"States.Format('SHARR_Remediation_AFSBP_{}', $.Finding.ProductFields.ControlId)\\",\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\"},\\"Next\\":\\"Get Automation Document State\\"},\\"Correct Security Standard?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.Finding.GeneratorId\\",\\"StringMatches\\":\\"aws-foundational-security-best-practices/v/1.0.0/*\\",\\"Next\\":\\"extractParameters\\"}],\\"Default\\":\\"Wrong Security Standard\\"},\\"Automation Doc Active?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.AutomationDocument.DocState\\",\\"StringEquals\\":\\"ACTIVE\\",\\"Next\\":\\"Execute Remediation\\"}],\\"Default\\":\\"Automation Document is not Active\\"},\\"Execute Remediation\\":{\\"Next\\":\\"execMonitor\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Execute the SSM Automation Document in the target account\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"ResultPath\\":\\"$.SSMExecution\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"yyy\\",\\"Payload.$\\":\\"$\\"},\\"ResultSelector\\":{\\"ExecState.$\\":\\"$.Payload.status\\",\\"Message.$\\":\\"$.Payload.message\\",\\"ExecId.$\\":\\"$.Payload.executionid\\"}},\\"execMonitor\\":{\\"Next\\":\\"Remediation completed?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Monitor the remediation execution until done\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"ResultPath\\":\\"$.Remediation\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"zzz\\",\\"Payload.$\\":\\"$\\"},\\"ResultSelector\\":{\\"ExecState.$\\":\\"$.Payload.status\\",\\"ExecId.$\\":\\"$.Payload.executionid\\",\\"RemediationState.$\\":\\"$.Payload.remediation_status\\",\\"Message.$\\":\\"$.Payload.message\\",\\"LogData.$\\":\\"$.Payload.logdata\\",\\"AffectedObject.$\\":\\"$.Payload.affected_object\\"}},\\"Wait for Remediation\\":{\\"Type\\":\\"Wait\\",\\"Seconds\\":15,\\"Next\\":\\"execMonitor\\"},\\"Remediation completed?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.Remediation.RemediationState\\",\\"StringEquals\\":\\"Failed\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Success\\",\\"Next\\":\\"Remediation Succeeded\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"TimedOut\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Cancelling\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Cancelled\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Failed\\",\\"Next\\":\\"Remediation Failed\\"}],\\"Default\\":\\"Wait for Remediation\\"},\\"Remediation Failed\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Set parameters for notification\\",\\"Parameters\\":{\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.RemediationRole\\",\\"ControlId.$\\":\\"$.ControlId\\",\\"SecurityStandard.$\\":\\"$.SecurityStandard\\",\\"Notification\\":{\\"Message.$\\":\\"States.Format('Remediation failed for {} control {} in account {}: {}', $.SecurityStandard, $.ControlId, $.AccountId, $.Remediation.Message)\\",\\"State.$\\":\\"$.Remediation.ExecState\\",\\"Details.$\\":\\"$.Remediation.LogData\\",\\"ExecId.$\\":\\"$.Remediation.ExecId\\",\\"AffectedObject.$\\":\\"$.Remediation.AffectedObject\\"}},\\"Next\\":\\"notify\\"},\\"Remediation Succeeded\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Set parameters for notification\\",\\"Parameters\\":{\\"Metrics.$\\":\\"$.Metrics\\",\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.RemediationRole\\",\\"ControlId.$\\":\\"$.ControlId\\",\\"SecurityStandard.$\\":\\"$.SecurityStandard\\",\\"Notification\\":{\\"Message.$\\":\\"States.Format('Remediation succeeded for {} control {} in account {}: {}', $.SecurityStandard, $.ControlId, $.AccountId, $.Remediation.Message)\\",\\"State.$\\":\\"States.Format('SUCCESS')\\",\\"Details.$\\":\\"$.Remediation.LogData\\",\\"ExecId.$\\":\\"$.Remediation.ExecId\\",\\"AffectedObject.$\\":\\"$.Remediation.AffectedObject\\"}},\\"Next\\":\\"notify\\"}}},\\"ItemsPath\\":\\"$.Findings\\"},\\"EOJ\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"END-OF-JOB\\",\\"End\\":true}},\\"TimeoutSeconds\\":900}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::If": Array [
                    "OrchestratorisNotGovCloud793D69A3",
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestratorSO0111SHARROrchestratorAFSBPEncrypted7E46D101",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestratorSO0111SHARROrchestratorAFSBP18511A69",
                        "Arn",
                      ],
                    },
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "OrchestratorRole9CF251DB",
            "Arn",
          ],
        },
        "StateMachineName": "SO0111-SHARR-Orchestrator-AFSBP",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
  },
}
`;
