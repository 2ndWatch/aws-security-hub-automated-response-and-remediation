description: |
  ### Document Name - SHARR_Remediation_AFSBP_Lambda.1
  ## What does this document do?
  This document removes the public resource policy. A public resource policy
  contains a principal "*" or AWS: "*", which allows public access to the 
  function. The remediation is to remove the SID of the public policy.

  ## Input Parameters
  * Finding: (Required) Security Hub finding details JSON
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
outputs:
  - Remediation.Output
  - ParseInput.AffectedObject
parameters:
  Finding:
    type: StringMap
    description: The input from Step function for the finding
  AutomationAssumeRole:
    type: String
    description: The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role/[\w+=,.@-]+'
mainSteps:
  - name: ParseInput
    action: 'aws:executeScript'
    outputs:
      - Name: FindingId
        Selector: $.Payload.finding_id
        Type: String
      - Name: ProductArn
        Selector: $.Payload.product_arn
        Type: String
      - Name: AffectedObject
        Selector: $.Payload.object
        Type: StringMap
      - Name: FunctionName
        Selector: $.Payload.function_name
        Type: String
    inputs:
      InputPayload:
        Finding: '{{Finding}}'
      Runtime: python3.7
      Handler: parse_event
      Script: |-
        import re
        def parse_event(event, context):
          my_control_id = 'Lambda.1'
          finding = event['Finding']

          finding_id = finding['Id']
          control_id = ''
          check_finding_id = re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:subscription/aws-foundational-security-best-practices/v/1\.0\.0/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',finding_id)
          if not check_finding_id:
            exit(f'ERROR: Finding Id is invalid: {finding_id}')
          else:
            control_id = check_finding_id.group(1)

          if not control_id:
            exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

          if control_id != my_control_id:
            exit(f'ERROR: Control Id from input ({control_id}) does not match {my_control_id}')

          product_arn = finding['ProductArn']
          if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d)::product/aws/securityhub$', product_arn):
            exit(f'ERROR: ProductArn is invalid: {product_arn}')

          account_id = finding['AwsAccountId']
          if not re.match('^\d{12}$', account_id):
            exit(f'ERROR: AwsAccountId is invalid: {account_id}')

          function_name = finding['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName']
          if not re.match(
            '^[a-zA-Z0-9-_]{1,64}$',
            function_name
          ):
            exit(f'ERROR: Function Name is invalid: {function_name}')

          object = {'Type': 'LambdaFunction', 'Id': function_name, 'OutputKey': 'Remediation.Output'}
          return {"function_name": function_name, "account_id": account_id, "finding_id": finding_id, "product_arn": product_arn, "object": object}
    isEnd: false 
  - name: RestrictLambda
    action: 'aws:executeScript'
    inputs:
      InputPayload:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        functionname: '{{ParseInput.FunctionName}}'
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        BOTO_CONFIG = Config(
          retries ={
            'mode': 'standard',
            'max_attempts': 10
          }
        )
        client = boto3.client('lambda', config=BOTO_CONFIG)

        def print_policy_before(policy):
          print('Resource Policy to be deleted:')
          print(json.dumps(policy, indent=2, default=str))

        def remove_resource_policy(functionname, sid):
          try:
            remove_response = client.remove_permission(
              FunctionName=functionname,
              StatementId=sid
            )
            print(f'SID {sid} removed from Lambda function {functionname}')
          except Exception as e:
            print(e)
            print(f'FAILED: SID {sid} was NOT removed from Lambda function {functionname}')
            raise

        def script_handler(event, context):

          functionname = event['functionname']
          try:
            response = client.get_policy(FunctionName=functionname)
            policy = response['Policy']
            policy_json = json.loads(policy)
            statements = policy_json['Statement']

            print('Scanning for public resource policies in ' + functionname)

            for statement in statements:
              # "*" or AWS: "*"
              principal_statements = []

              if isinstance(statement['Principal'], list):
                principal_statements = statement['Principal']
              else:
                principal_statements = [statement['Principal']]

              for principal in principal_statements:
                if principal == "*" or (isinstance(principal, dict) and principal.get("AWS","") == "*"):
                  print_policy_before(statement)
                  remove_resource_policy(functionname, statement['Sid'])
                  break

            result = client.get_policy(FunctionName=functionname)
            print("Remediation completed. Resource policy is now:")
            print(json.dumps(result, indent=2, default=str))
          except ClientError as ex:
            exception_type = ex.response['Error']['Code']
            if exception_type in ['ResourceNotFoundException']:
              print("Remediation completed. Resource policy is now empty.")
            else:
              raise
          except Exception as e:
            print(e)
            raise

    outputs:
      - Name: Output
        Selector: $
        Type: StringMap

  - 
    name: Remediation
    action: 'aws:executeScript'
    outputs:
      - Name: Output
        Selector: $.Payload.response
        Type: StringMap
    inputs:
      InputPayload:
        functionname: '{{ParseInput.FunctionName}}'
      Runtime: python3.7
      Handler: verify
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        BOTO_CONFIG = Config(
          retries ={
            'mode': 'standard',
            'max_attempts': 10
          }
        )
        def verify(event, context):
          client = boto3.client('lambda', config=BOTO_CONFIG)
          function_name_to_check = event['functionname']
          try:
            response = client.get_policy(FunctionName=function_name_to_check)

            print("Remediation executed successfully. Policy after:")
            print(json.dumps(response, indent=2, default=str))
            return {
              "response": {
                "status": "Success",
                "message": "Remediation executed successfully."
              }
            }
          except ClientError as ex:
            exception_type = ex.response['Error']['Code']
            if exception_type in ['ResourceNotFoundException']:
              print("Remediation completed. Resource policy is now empty.")
            else:
              exit(f'ERROR: {exception_type} on get_policy')
          except Exception as e:
            print(e)
            exit("Exception while retrieving lambda function policy")
    isEnd: false

  - 
    name: UpdateFinding
    action: 'aws:executeAwsApi'
    inputs:
      Service: securityhub
      Api: BatchUpdateFindings
      FindingIdentifiers:
      - Id: '{{ParseInput.FindingId}}'
        ProductArn: '{{ParseInput.ProductArn}}'
      Note:
        Text: 'Lamdba {{ParseInput.FunctionName}} policy updated to remove public access'
        UpdatedBy: 'SHARR_Remediation_AFSBP_Lambda.1'
      Workflow:
        Status: RESOLVED
    description: Update finding
    isEnd: true